{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/Shop.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.8;\n\nimport \"../node_modules/@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./Users.sol\";\n\nerror Shop__NotEnoughMoney(uint requiredPrice);\nerror Shop__NotListed(uint notExistingId);\nerror Shop__AlreadyOwner(uint ownedItemId);\nerror Shop__NotOwner(uint notOwnedItemId);\n\ncontract Shop is Ownable, Users{\n    \n    Item[] public itemList;\n\n    struct Item{\n        string name;\n        string description;\n        string picture;\n        uint id;\n        address owner;\n        uint price;\n    }\n\n\n    //Set the number to guess, the owner of the game, and the games that have been played so far.\n    constructor(){\n       _owner = msg.sender; \n    }\n\n    event ItemListed(string indexed name, address indexed seller, uint indexed id, uint price);\n\n    event ItemBought(string indexed name, address indexed buyer, uint indexed id);\n    \n    event ItemCancelled(string indexed name, uint indexed id);\n\n    modifier isListed(uint _id){\n        if(_id >= itemList.length){\n            revert Shop__NotListed(_id);\n        }\n        _;\n    }\n\n    function listItem(string memory _name, string memory _description, string memory _picture, uint _price) public{\n        itemList.push(Item(_name, _description, _picture, itemList.length, msg.sender, _price));\n        emit ItemListed(_name, msg.sender, itemList.length - 1, _price);\n    }\n\n    function buyItem(uint _id) public payable isListed(_id){\n        uint price = itemList[_id].price;\n        uint discount = price * userLevel[msg.sender] * 5 / 100;\n        uint finalPrice = price - discount;\n        if(msg.value < finalPrice){\n            revert Shop__NotEnoughMoney(itemList[_id].price);\n        }\n        if(msg.sender == itemList[_id].owner){\n            revert Shop__AlreadyOwner(_id);\n        }\n        givePoints(itemList[_id].owner, price / 50);\n        itemList[_id].owner = msg.sender;\n        givePoints(msg.sender, finalPrice / 50);\n        emit ItemBought(itemList[_id].name, msg.sender, _id);\n    }\n\n    function cancelItem(uint _id) public isListed(_id){\n        if(itemList[_id].owner != msg.sender){\n            revert Shop__NotOwner(_id);\n        }\n        delete itemList[_id];\n        emit ItemCancelled(itemList[_id].name, _id);\n    }\n\n    function getListedItem(uint _item) public view returns (string memory){\n        if(itemList.length == 0){\n            return (\"No items listed yet\");\n        }\n        return itemList[itemList.length - _item].name;\n    }\n    \n    function givePoints() pure internal{\n        super.givePoints;\n    }\n    \n}\n"
    },
    "contracts/Users.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.8;\r\n\r\nimport \"../node_modules/@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\nerror Users__NotLevel5(address);\r\nerror Users__NotEmbassador(address);\r\nerror Users__AlreadyEvaluated(address);\r\nerror Users__NotAdmittedGrade();\r\nerror Users__OwnerNotAllowed();\r\n\r\ncontract Users is Ownable{\r\n\r\n    event addressWasSet(address indexed, string indexed);\r\n    event mailWasSet(address indexed, string indexed);\r\n    event telephoneWasSet(address indexed, string indexed);\r\n\r\n    address _owner;\r\n    uint ownerGrade;\r\n    uint ownerVotes;\r\n\r\n    mapping(address => uint) userLevel;\r\n    mapping(address => uint) userPoints;\r\n    mapping(address => bool) isEmbassador;\r\n    mapping(address => bool) evaluatedOwner;\r\n    mapping(address => string) private userAddress;\r\n    mapping(address => string) private userMail;\r\n    mapping(address => string) private userTelephone;\r\n\r\n    constructor(){\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function givePoints(address _user, uint _points) internal virtual{\r\n        userPoints[_user] = userPoints[_user] + _points;\r\n        updateLevel(_user);\r\n    }\r\n\r\n    function updateLevel(address _user) internal{\r\n        if(userPoints[_user] < 100) userLevel[_user] = 0;\r\n        else if(userPoints[_user] >= 100 && userPoints[_user] < 200) userLevel[_user] = 1;\r\n        else if(userPoints[_user] >= 200 && userPoints[_user] < 300) userLevel[_user] = 2;\r\n        else if(userPoints[_user] >= 300 && userPoints[_user] < 400) userLevel[_user] = 3;\r\n        else if(userPoints[_user] >= 400 && userPoints[_user] < 500) userLevel[_user] = 4;\r\n        else if(userPoints[_user] >= 500) userLevel[_user] = 5;\r\n    }\r\n\r\n    function makeEmbassador(address _user) public onlyOwner(){\r\n        if(userLevel[_user] != 5){\r\n            revert Users__NotLevel5(_user);\r\n        }\r\n        isEmbassador[_user] = true;\r\n    }\r\n\r\n    function cancelEmbassador(address _user) public onlyOwner(){\r\n        uint ownerPower = ownerGrade / ownerVotes;\r\n        if(ownerPower < 7){\r\n            revert Users__OwnerNotAllowed();\r\n        }\r\n        if(!isEmbassador[_user]){\r\n            revert Users__NotEmbassador(_user);\r\n        }\r\n        isEmbassador[_user] = false;\r\n    }\r\n\r\n    function evaluateOwner(uint _grade) public{\r\n        if(!isEmbassador[msg.sender]){\r\n            revert Users__NotEmbassador(msg.sender);\r\n        }\r\n        if(evaluatedOwner[msg.sender]){\r\n            revert Users__AlreadyEvaluated(msg.sender);\r\n        }\r\n        if(_grade < 0 || _grade > 10){\r\n            revert Users__NotAdmittedGrade();\r\n        }\r\n\r\n        evaluatedOwner[msg.sender] = true;\r\n        ownerGrade = ownerGrade + _grade;\r\n        ownerVotes++;\r\n    }\r\n\r\n    function getMyLevel() public view returns (uint){\r\n        return userLevel[msg.sender];\r\n    }\r\n\r\n    function setMyAddress(string memory _myAddress) public{\r\n        userAddress[msg.sender] = _myAddress;\r\n        emit addressWasSet(msg.sender, _myAddress);\r\n    }\r\n\r\n    function setMyMail(string memory _myMail) public{\r\n        userMail[msg.sender] = _myMail;\r\n        emit mailWasSet(msg.sender, _myMail);\r\n    }\r\n\r\n    function setMyTelephone(string memory _myTelephone) public{\r\n        userTelephone[msg.sender] = _myTelephone;\r\n        emit telephoneWasSet(msg.sender, _myTelephone);\r\n    }\r\n\r\n    function getMyAddress() public view returns (string memory){\r\n        return userAddress[msg.sender];\r\n    }\r\n\r\n    function getMyMail() public view returns (string memory){\r\n        return userMail[msg.sender];\r\n    }\r\n    \r\n    function getMyTelephone() public view returns (string memory){\r\n        return userTelephone[msg.sender];\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}